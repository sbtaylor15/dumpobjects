name: Build/Push Image and Release Charts
"on":
  push:
    branches:
      - main
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1

      - name: Export Environment Variable
        id: env
        env:
          DHURL: https://console.deployhub.com
          REGISTRY: quay.io
          BRANCH: ${{ github.head_ref || github.ref_name }}
        run: |
          BRANCH=$(echo "${{ env.BRANCH }}" | cut -d'/' -f1)
          BASE_VERSION=$(curl -s "https://ortelius.github.io/${{ github.event.repository.name }}/index.yaml" | grep version: | awk '{print $2}' | cut -f1-2 -d. | sort -u -r --version-sort | head -1)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c 1-6)
          {
            echo "dhurl=${{ env.DHURL }}"
            echo "branch=${BRANCH}"
            echo "chart_version=${BASE_VERSION}.${{ github.run_number }}"
            echo "compname=${{ github.event.repository.name }}"
            echo "image_repo_tag=${{ env.REGISTRY }}/${{ github.repository }}:${BRANCH}-v${BASE_VERSION}.${{ github.run_number }}-g${SHORT_SHA}"
            echo "image_repository=${{ env.REGISTRY }}/${{ github.repository }}"
            echo "image_tag=${BRANCH}-v${BASE_VERSION}.${{ github.run_number }}-g${SHORT_SHA}"
            echo "image_version=${BASE_VERSION}.${{ github.run_number }}-g${SHORT_SHA}"
            echo "registry=${{ env.REGISTRY }}"
            echo "short_sha=${SHORT_SHA}"
            echo "gh_handle=$GITHUB_ACTOR"
          } >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.13.0-rc1

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5.2.0
        with:
          push: false
          tags: ${{ steps.env.outputs.image_repo_tag }}
          platforms: linux/amd64
          attests: type=provenance,type=sbom

      - name: Inspect Docker Image
        id: inspect-image
        run: |
          docker buildx inspect ${{ steps.env.outputs.image_repo_tag }} --format "{{json .Provenance.SLSA}}" > prov.json
          cat prov.json
          echo "attestation=$(cat prov.json)" >> "$GITHUB_OUTPUT"


      - name: Generate Intoto JSONL File
        id: generate-intoto
        uses: slsa-framework/slsa-github-generator@v1
        with:
          attestation: ${{ steps.inspect-image.outputs.attestation }}
          output_file: in-toto.jsonl
